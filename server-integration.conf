# GovtJobsNow - Server Integration Configuration
# Use this for integrating with existing web server (Apache/Nginx)

# ================================
# OPTION 1: Subdomain Integration (RECOMMENDED)
# ================================
# Create a separate server block for a subdomain

server {
    listen 80;
    server_name jobs.yourdomain.com;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2;
    server_name jobs.yourdomain.com;
    
    # SSL configuration (use your existing certificates)
    ssl_certificate /path/to/your/cert.pem;
    ssl_certificate_key /path/to/your/key.pem;
    
    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    
    # Proxy all requests to the containerized app
    location / {
        proxy_pass http://127.0.0.1:8080;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        proxy_read_timeout 300s;
        proxy_connect_timeout 75s;
    }
    
    # Static files caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$ {
        proxy_pass http://127.0.0.1:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}

# ================================
# OPTION 2: Path-based Integration (Advanced)
# ================================
# NOTE: Requires rebuilding the frontend with base path
# Add this to your existing server block:

# First, you need to rebuild the frontend with base path:
# VITE_BASE_PATH=/govtjobs/ npm run build

location /govtjobs/ {
    # Proxy to our containerized app
    proxy_pass http://127.0.0.1:8080/;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Prefix /govtjobs;
    proxy_cache_bypass $http_upgrade;
    proxy_read_timeout 300s;
    proxy_connect_timeout 75s;
}

# ================================
# OPTION 3: Apache Integration
# ================================
# Subdomain approach (recommended)

<VirtualHost *:80>
    ServerName jobs.yourdomain.com
    Redirect permanent / https://jobs.yourdomain.com/
</VirtualHost>

<VirtualHost *:443>
    ServerName jobs.yourdomain.com
    
    # SSL configuration (use your existing certificates)
    SSLEngine on
    SSLCertificateFile /path/to/your/cert.pem
    SSLCertificateKeyFile /path/to/your/key.pem
    
    # Security headers
    Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
    Header always set X-Frame-Options DENY
    Header always set X-Content-Type-Options nosniff
    
    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/
    
    # WebSocket support
    RewriteEngine on
    RewriteCond %{HTTP:Upgrade} websocket [NC]
    RewriteCond %{HTTP:Connection} upgrade [NC]
    RewriteRule ^/?(.*) "ws://127.0.0.1:8080/$1" [P,L]
    
    # Static files caching
    <LocationMatch "\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)$">
        ExpiresActive On
        ExpiresDefault "access plus 1 year"
        Header append Cache-Control "public, immutable"
    </LocationMatch>
</VirtualHost>

# ================================
# OPTION 4: Direct Access (No Web Server Integration)
# ================================
# Point DNS A record to server IP
# Access via: http://jobs.yourdomain.com:8080
# 
# For custom port with domain:
# 1. Create DNS A record: jobs.yourdomain.com -> your-server-ip
# 2. Open firewall: ufw allow 8080
# 3. Access: http://jobs.yourdomain.com:8080

# ================================
# PORTS USED BY THIS APPLICATION
# ================================
# - 8080: Main web access (HTTP)
# - 8443: HTTPS access (when SSL configured)  
# - 5433: PostgreSQL (if external access needed)
# - Docker internal: 5000 (app), 5432 (postgres), 80/443 (internal nginx)

# ================================
# INTEGRATION CHECKLIST
# ================================
# 1. Verify ports 8080 and 8443 are not in use: ss -tulpn | grep -E ':8080|:8443'
# 2. Check available memory: free -h (app needs ~512MB minimum)
# 3. Ensure Docker network 172.25.0.0/16 doesn't conflict: docker network ls
# 4. Test web server configuration: nginx -t (for Nginx) or httpd -t (for Apache)
# 5. For subdomain approach: Create DNS A record pointing to server IP
# 6. For direct access: Open firewall ports: ufw allow 8080 && ufw allow 8443
# 7. For web server integration: Configure SSL certificates in your existing server
# 8. Test configuration and restart web server

# ================================
# TROUBLESHOOTING TIPS
# ================================
# - For asset loading issues with path-based integration, rebuild frontend with base path
# - Use browser dev tools to check for 404 errors on assets
# - Verify proxy headers are properly set for client IP tracking
# - Check application logs: docker compose logs -f app
# - Verify compose compatibility: The deploy script detects both 'docker compose' (v2) and 'docker-compose' (v1)
# - Test health endpoint: curl http://localhost:8080/health